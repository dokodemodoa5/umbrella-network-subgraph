// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class LogMint extends ethereum.Event {
  get params(): LogMint__Params {
    return new LogMint__Params(this);
  }
}

export class LogMint__Params {
  _event: LogMint;

  constructor(event: LogMint) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get blockId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get staked(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get power(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class LogPadding extends ethereum.Event {
  get params(): LogPadding__Params {
    return new LogPadding__Params(this);
  }
}

export class LogPadding__Params {
  _event: LogPadding;

  constructor(event: LogPadding) {
    this._event = event;
  }

  get executor(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get timePadding(): i32 {
    return this._event.parameters[1].value.toI32();
  }
}

export class LogVoter extends ethereum.Event {
  get params(): LogVoter__Params {
    return new LogVoter__Params(this);
  }
}

export class LogVoter__Params {
  _event: LogVoter;

  constructor(event: LogVoter) {
    this._event = event;
  }

  get blockId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get vote(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Chain__blocksResult {
  value0: Bytes;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: Bytes, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Chain__fcdsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Chain__getCurrentValueResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Chain__getCurrentValuesResult {
  value0: Array<BigInt>;
  value1: Array<BigInt>;

  constructor(value0: Array<BigInt>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigIntArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }
}

export class Chain__getStatusResult {
  value0: BigInt;
  value1: i32;
  value2: BigInt;
  value3: BigInt;
  value4: Address;
  value5: BigInt;
  value6: Array<Address>;
  value7: Array<BigInt>;
  value8: Array<string>;
  value9: BigInt;

  constructor(
    value0: BigInt,
    value1: i32,
    value2: BigInt,
    value3: BigInt,
    value4: Address,
    value5: BigInt,
    value6: Array<Address>,
    value7: Array<BigInt>,
    value8: Array<string>,
    value9: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
    this.value9 = value9;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromAddressArray(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigIntArray(this.value7));
    map.set("value8", ethereum.Value.fromStringArray(this.value8));
    map.set("value9", ethereum.Value.fromUnsignedBigInt(this.value9));
    return map;
  }
}

export class Chain extends ethereum.SmartContract {
  static bind(address: Address): Chain {
    return new Chain("Chain", address);
  }

  ETH_PREFIX(): Bytes {
    let result = super.call("ETH_PREFIX", "ETH_PREFIX():(bytes)", []);

    return result[0].toBytes();
  }

  try_ETH_PREFIX(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ETH_PREFIX", "ETH_PREFIX():(bytes)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  blocks(param0: BigInt): Chain__blocksResult {
    let result = super.call(
      "blocks",
      "blocks(uint256):(bytes32,uint32,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new Chain__blocksResult(
      result[0].toBytes(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_blocks(param0: BigInt): ethereum.CallResult<Chain__blocksResult> {
    let result = super.tryCall(
      "blocks",
      "blocks(uint256):(bytes32,uint32,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Chain__blocksResult(
        value[0].toBytes(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  blocksCount(): BigInt {
    let result = super.call("blocksCount", "blocksCount():(uint32)", []);

    return result[0].toBigInt();
  }

  try_blocksCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("blocksCount", "blocksCount():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blocksCountOffset(): BigInt {
    let result = super.call(
      "blocksCountOffset",
      "blocksCountOffset():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_blocksCountOffset(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "blocksCountOffset",
      "blocksCountOffset():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  bytesToBytes32Array(
    _data: Bytes,
    _offset: BigInt,
    _items: BigInt
  ): Array<Bytes> {
    let result = super.call(
      "bytesToBytes32Array",
      "bytesToBytes32Array(bytes,uint256,uint256):(bytes32[])",
      [
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromUnsignedBigInt(_offset),
        ethereum.Value.fromUnsignedBigInt(_items)
      ]
    );

    return result[0].toBytesArray();
  }

  try_bytesToBytes32Array(
    _data: Bytes,
    _offset: BigInt,
    _items: BigInt
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "bytesToBytes32Array",
      "bytesToBytes32Array(bytes,uint256,uint256):(bytes32[])",
      [
        ethereum.Value.fromBytes(_data),
        ethereum.Value.fromUnsignedBigInt(_offset),
        ethereum.Value.fromUnsignedBigInt(_items)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  contractRegistry(): Address {
    let result = super.call(
      "contractRegistry",
      "contractRegistry():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_contractRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "contractRegistry",
      "contractRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fcds(param0: Bytes): Chain__fcdsResult {
    let result = super.call("fcds", "fcds(bytes32):(uint224,uint32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return new Chain__fcdsResult(result[0].toBigInt(), result[1].toBigInt());
  }

  try_fcds(param0: Bytes): ethereum.CallResult<Chain__fcdsResult> {
    let result = super.tryCall("fcds", "fcds(bytes32):(uint224,uint32)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Chain__fcdsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getBlockId(): BigInt {
    let result = super.call("getBlockId", "getBlockId():(uint32)", []);

    return result[0].toBigInt();
  }

  try_getBlockId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBlockId", "getBlockId():(uint32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlockRoot(_blockId: BigInt): Bytes {
    let result = super.call("getBlockRoot", "getBlockRoot(uint32):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(_blockId)
    ]);

    return result[0].toBytes();
  }

  try_getBlockRoot(_blockId: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getBlockRoot",
      "getBlockRoot(uint32):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(_blockId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getBlockTimestamp(_blockId: BigInt): BigInt {
    let result = super.call(
      "getBlockTimestamp",
      "getBlockTimestamp(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_blockId)]
    );

    return result[0].toBigInt();
  }

  try_getBlockTimestamp(_blockId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBlockTimestamp",
      "getBlockTimestamp(uint32):(uint32)",
      [ethereum.Value.fromUnsignedBigInt(_blockId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getCurrentValue(_key: Bytes): Chain__getCurrentValueResult {
    let result = super.call(
      "getCurrentValue",
      "getCurrentValue(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_key)]
    );

    return new Chain__getCurrentValueResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getCurrentValue(
    _key: Bytes
  ): ethereum.CallResult<Chain__getCurrentValueResult> {
    let result = super.tryCall(
      "getCurrentValue",
      "getCurrentValue(bytes32):(uint256,uint256)",
      [ethereum.Value.fromFixedBytes(_key)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Chain__getCurrentValueResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getCurrentValues(_keys: Array<Bytes>): Chain__getCurrentValuesResult {
    let result = super.call(
      "getCurrentValues",
      "getCurrentValues(bytes32[]):(uint256[],uint32[])",
      [ethereum.Value.fromFixedBytesArray(_keys)]
    );

    return new Chain__getCurrentValuesResult(
      result[0].toBigIntArray(),
      result[1].toBigIntArray()
    );
  }

  try_getCurrentValues(
    _keys: Array<Bytes>
  ): ethereum.CallResult<Chain__getCurrentValuesResult> {
    let result = super.tryCall(
      "getCurrentValues",
      "getCurrentValues(bytes32[]):(uint256[],uint32[])",
      [ethereum.Value.fromFixedBytesArray(_keys)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Chain__getCurrentValuesResult(
        value[0].toBigIntArray(),
        value[1].toBigIntArray()
      )
    );
  }

  getLatestBlockId(): BigInt {
    let result = super.call(
      "getLatestBlockId",
      "getLatestBlockId():(uint32)",
      []
    );

    return result[0].toBigInt();
  }

  try_getLatestBlockId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLatestBlockId",
      "getLatestBlockId():(uint32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLeaderAddress(): Address {
    let result = super.call(
      "getLeaderAddress",
      "getLeaderAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getLeaderAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLeaderAddress",
      "getLeaderAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLeaderAddressAtTime(_timestamp: BigInt): Address {
    let result = super.call(
      "getLeaderAddressAtTime",
      "getLeaderAddressAtTime(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    );

    return result[0].toAddress();
  }

  try_getLeaderAddressAtTime(_timestamp: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getLeaderAddressAtTime",
      "getLeaderAddressAtTime(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_timestamp)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getLeaderIndex(_numberOfValidators: BigInt, _timestamp: BigInt): BigInt {
    let result = super.call(
      "getLeaderIndex",
      "getLeaderIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_numberOfValidators),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );

    return result[0].toBigInt();
  }

  try_getLeaderIndex(
    _numberOfValidators: BigInt,
    _timestamp: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLeaderIndex",
      "getLeaderIndex(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_numberOfValidators),
        ethereum.Value.fromUnsignedBigInt(_timestamp)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getName(): Bytes {
    let result = super.call("getName", "getName():(bytes32)", []);

    return result[0].toBytes();
  }

  try_getName(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("getName", "getName():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getNextLeaderAddress(): Address {
    let result = super.call(
      "getNextLeaderAddress",
      "getNextLeaderAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getNextLeaderAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNextLeaderAddress",
      "getNextLeaderAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getStatus(): Chain__getStatusResult {
    let result = super.call(
      "getStatus",
      "getStatus():(uint256,uint16,uint32,uint32,address,uint32,address[],uint256[],string[],uint256)",
      []
    );

    return new Chain__getStatusResult(
      result[0].toBigInt(),
      result[1].toI32(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBigInt(),
      result[6].toAddressArray(),
      result[7].toBigIntArray(),
      result[8].toStringArray(),
      result[9].toBigInt()
    );
  }

  try_getStatus(): ethereum.CallResult<Chain__getStatusResult> {
    let result = super.tryCall(
      "getStatus",
      "getStatus():(uint256,uint16,uint32,uint32,address,uint32,address[],uint256[],string[],uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Chain__getStatusResult(
        value[0].toBigInt(),
        value[1].toI32(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBigInt(),
        value[6].toAddressArray(),
        value[7].toBigIntArray(),
        value[8].toStringArray(),
        value[9].toBigInt()
      )
    );
  }

  hashLeaf(_key: Bytes, _value: Bytes): Bytes {
    let result = super.call("hashLeaf", "hashLeaf(bytes,bytes):(bytes32)", [
      ethereum.Value.fromBytes(_key),
      ethereum.Value.fromBytes(_value)
    ]);

    return result[0].toBytes();
  }

  try_hashLeaf(_key: Bytes, _value: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall("hashLeaf", "hashLeaf(bytes,bytes):(bytes32)", [
      ethereum.Value.fromBytes(_key),
      ethereum.Value.fromBytes(_value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  padding(): i32 {
    let result = super.call("padding", "padding():(uint16)", []);

    return result[0].toI32();
  }

  try_padding(): ethereum.CallResult<i32> {
    let result = super.tryCall("padding", "padding():(uint16)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  recoverSigner(_affidavit: Bytes, _v: i32, _r: Bytes, _s: Bytes): Address {
    let result = super.call(
      "recoverSigner",
      "recoverSigner(bytes32,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(_affidavit),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );

    return result[0].toAddress();
  }

  try_recoverSigner(
    _affidavit: Bytes,
    _v: i32,
    _r: Bytes,
    _s: Bytes
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "recoverSigner",
      "recoverSigner(bytes32,uint8,bytes32,bytes32):(address)",
      [
        ethereum.Value.fromFixedBytes(_affidavit),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_v)),
        ethereum.Value.fromFixedBytes(_r),
        ethereum.Value.fromFixedBytes(_s)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingBankContract(): Address {
    let result = super.call(
      "stakingBankContract",
      "stakingBankContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_stakingBankContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingBankContract",
      "stakingBankContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenContract(): Address {
    let result = super.call("tokenContract", "tokenContract():(address)", []);

    return result[0].toAddress();
  }

  try_tokenContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "tokenContract",
      "tokenContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  validatorRegistryContract(): Address {
    let result = super.call(
      "validatorRegistryContract",
      "validatorRegistryContract():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_validatorRegistryContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "validatorRegistryContract",
      "validatorRegistryContract():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  verifyProof(_proof: Array<Bytes>, _root: Bytes, _leaf: Bytes): boolean {
    let result = super.call(
      "verifyProof",
      "verifyProof(bytes32[],bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromFixedBytes(_root),
        ethereum.Value.fromFixedBytes(_leaf)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyProof(
    _proof: Array<Bytes>,
    _root: Bytes,
    _leaf: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyProof",
      "verifyProof(bytes32[],bytes32,bytes32):(bool)",
      [
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromFixedBytes(_root),
        ethereum.Value.fromFixedBytes(_leaf)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyProofForBlock(
    _blockId: BigInt,
    _proof: Array<Bytes>,
    _key: Bytes,
    _value: Bytes
  ): boolean {
    let result = super.call(
      "verifyProofForBlock",
      "verifyProofForBlock(uint256,bytes32[],bytes,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_blockId),
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromBytes(_key),
        ethereum.Value.fromBytes(_value)
      ]
    );

    return result[0].toBoolean();
  }

  try_verifyProofForBlock(
    _blockId: BigInt,
    _proof: Array<Bytes>,
    _key: Bytes,
    _value: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "verifyProofForBlock",
      "verifyProofForBlock(uint256,bytes32[],bytes,bytes):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_blockId),
        ethereum.Value.fromFixedBytesArray(_proof),
        ethereum.Value.fromBytes(_key),
        ethereum.Value.fromBytes(_value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  verifyProofs(
    _blockIds: Array<BigInt>,
    _proofs: Bytes,
    _proofItemsCounter: Array<BigInt>,
    _leaves: Array<Bytes>
  ): Array<boolean> {
    let result = super.call(
      "verifyProofs",
      "verifyProofs(uint32[],bytes,uint256[],bytes32[]):(bool[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_blockIds),
        ethereum.Value.fromBytes(_proofs),
        ethereum.Value.fromUnsignedBigIntArray(_proofItemsCounter),
        ethereum.Value.fromFixedBytesArray(_leaves)
      ]
    );

    return result[0].toBooleanArray();
  }

  try_verifyProofs(
    _blockIds: Array<BigInt>,
    _proofs: Bytes,
    _proofItemsCounter: Array<BigInt>,
    _leaves: Array<Bytes>
  ): ethereum.CallResult<Array<boolean>> {
    let result = super.tryCall(
      "verifyProofs",
      "verifyProofs(uint32[],bytes,uint256[],bytes32[]):(bool[])",
      [
        ethereum.Value.fromUnsignedBigIntArray(_blockIds),
        ethereum.Value.fromBytes(_proofs),
        ethereum.Value.fromUnsignedBigIntArray(_proofItemsCounter),
        ethereum.Value.fromFixedBytesArray(_leaves)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBooleanArray());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _contractRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _padding(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetPaddingCall extends ethereum.Call {
  get inputs(): SetPaddingCall__Inputs {
    return new SetPaddingCall__Inputs(this);
  }

  get outputs(): SetPaddingCall__Outputs {
    return new SetPaddingCall__Outputs(this);
  }
}

export class SetPaddingCall__Inputs {
  _call: SetPaddingCall;

  constructor(call: SetPaddingCall) {
    this._call = call;
  }

  get _padding(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetPaddingCall__Outputs {
  _call: SetPaddingCall;

  constructor(call: SetPaddingCall) {
    this._call = call;
  }
}

export class SubmitCall extends ethereum.Call {
  get inputs(): SubmitCall__Inputs {
    return new SubmitCall__Inputs(this);
  }

  get outputs(): SubmitCall__Outputs {
    return new SubmitCall__Outputs(this);
  }
}

export class SubmitCall__Inputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }

  get _dataTimestamp(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _root(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get _keys(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }

  get _values(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _v(): Array<i32> {
    return this._call.inputValues[4].value.toI32Array();
  }

  get _r(): Array<Bytes> {
    return this._call.inputValues[5].value.toBytesArray();
  }

  get _s(): Array<Bytes> {
    return this._call.inputValues[6].value.toBytesArray();
  }
}

export class SubmitCall__Outputs {
  _call: SubmitCall;

  constructor(call: SubmitCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
